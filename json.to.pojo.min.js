function toPojo(e,i,t){let n=JSON.parse(i),l="",a=[],r=!1;l+="public class "+t.identifier+" {\n",Object.keys(n).forEach(function(e){if("string"==typeof n[e])l+="\tpublic String "+e+";\n";else if("number"==typeof n[e])Number.isSafeInteger(n[e])?l+="\tpublic Integer "+e+";\n":l+="\tpublic Double "+e+";\n";else if("boolean"==typeof n[e])l+="\tpublic boolean "+e+";\n";else if(Array.isArray(n[e])){if(0==n[e].length)l+="\tpublic List<Object> "+e+";\n";else if("string"==typeof n[e][0])l+="\tpublic List<String> "+e+";\n";else if("number"==typeof n[e][0]){for(number of(isIntArray=!0,n[e]))if(!Number.isSafeInteger(number)){isIntArray=!1;break}isIntArray?l+="\tpublic List<Integer> "+e+";\n":l+="\tpublic List<Double> "+e+";\n"}else"boolean"==typeof n[e][0]?l+="\tpublic List<Boolean> "+e+";\n":(l+="\tpublic List<"+capitalize(e)+"> "+e+";\n",a.push({fieldName:e,val:n[e][0]}));r=!0}else null==n[e]?l+="\tpublic Object "+e+";\n":(l+="\tpublic "+capitalize(e)+" "+e+";\n",a.push({fieldName:e,val:n[e]}))}),l+="}",t.isCreateImpots&&r&&(l="import java.util.List;\n"+l),t.isPackage&&(l="package "+t.packageDefinition+";\n"+l),e.push(l),a.forEach(i=>{t.identifier=capitalize(i.fieldName),toPojo(e,JSON.stringify(i.val),t)})}const capitalize=e=>"string"!=typeof e?"":e.charAt(0).toUpperCase()+e.slice(1);