function toPojo(e,t,i){let a=JSON.parse(t),n="",r=[],l=!1;n+="public class "+i.identifier+" {\n";let s=i.isPrivateFields?"private":"public",p=i.isCreateGS,o="",u="",c=i.isBuilder,f="";Object.keys(a).forEach(function(e){let t="",b=unCapitalize(e);if("string"==typeof a[e])n+="\t"+s+" String "+unCapitalize(e)+";\n",t="String";else if("number"==typeof a[e])Number.isSafeInteger(a[e])?(n+="\t"+s+" Integer "+unCapitalize(e)+";\n",t="Integer"):(n+="\t"+s+" Double "+unCapitalize(e)+";\n",t="Double");else if("boolean"==typeof a[e])n+="\t"+s+" boolean "+unCapitalize(e)+";\n",t="boolean";else if(Array.isArray(a[e])){if(0==a[e].length)n+="\t"+s+" List<Object> "+unCapitalize(e)+";\n",t="List<Object>";else if("string"==typeof a[e][0])n+="\t"+s+" List<String> "+unCapitalize(e)+";\n",t="List<String>";else if("number"==typeof a[e][0]){for(number of(isIntArray=!0,a[e]))if(!Number.isSafeInteger(number)){isIntArray=!1;break}isIntArray?(n+="\t"+s+" List<Integer> "+unCapitalize(e)+";\n",t="List<Integer>"):(n+="\t"+s+" List<Double> "+unCapitalize(e)+";\n",t="List<Double>")}else"boolean"==typeof a[e][0]?(n+="\t"+s+" List<Boolean> "+unCapitalize(e)+";\n",t="List<Boolean>"):(n+="\t"+s+" List<"+capitalize(e)+"> "+unCapitalize(e)+";\n",r.push({fieldName:e,val:a[e][0]}),t="List<"+capitalize(e)+"> ");l=!0}else null==a[e]?(n+="\t"+s+" Object "+unCapitalize(e)+";\n",t="Object"):(n+="\t"+s+" "+capitalize(e)+" "+unCapitalize(e)+";\n",r.push({fieldName:e,val:a[e]}),t=capitalize(e));p&&(o+="\n"+createSetter(t,b),u+="\n"+createGetter(t,b)),c&&(f+="\n"+createBuilder(i.identifier,t,b))}),c&&(n+=f),p&&(n+=o,n+=u),n+="}",i.isCreateImpots&&l&&(n="import java.util.List;\n"+n),i.isPackage&&(n="package "+i.packageDefinition+";\n"+n),e.push(n),r.forEach(t=>{i.identifier=capitalize(t.fieldName),toPojo(e,JSON.stringify(t.val),i)})}const createGetter=(e,t)=>{let i="\tpublic "+e+" get"+capitalize(t)+"() {\n";return i+="\t\treturn "+t+";\n",i+="\t}\n"},createSetter=(e,t)=>{let i="\tpublic void set"+capitalize(t)+"("+e+" "+t+") { \n";return i+="\t\tthis."+t+" = "+t+";\n",i+="\t}\n"},createBuilder=(e,t,i)=>{let a="\tpublic "+e+" "+i+"("+t+" "+i+") { \n";return a+="\t\tthis."+i+" = "+i+";\n",a+="\t\treturn this;\n",a+="\t}\n"},capitalize=e=>"string"!=typeof e?"":e.charAt(0).toUpperCase()+e.slice(1),unCapitalize=e=>"string"!=typeof e?"":e.charAt(0).toLowerCase()+e.slice(1);